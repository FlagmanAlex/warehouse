{
  "compilerOptions": {
    /* Посетите https://aka.ms/tsconfig для получения дополнительной информации об этом файле */
    /* Проекты */
    // "incremental": true,                              /* Сохранять файлы .tsbuildinfo для инкрементальной компиляции проектов. */
    // "composite": true,                                /* Включить ограничения, которые позволяют использовать TypeScript-проект с ссылками на другие проекты. */
    // "tsBuildInfoFile": "./.tsbuildinfo",              /* Указать путь к файлу .tsbuildinfo для инкрементальной компиляции. */
    // "disableSourceOfProjectReferenceRedirect": true,  /* Отключить предпочтение исходных файлов перед файлами деклараций при ссылках на составные проекты. */
    // "disableSolutionSearching": true,                 /* Исключить проект из проверки ссылок на несколько проектов при редактировании. */
    // "disableReferencedProjectLoad": true,             /* Уменьшить количество автоматически загружаемых проектов TypeScript. */
    /* Язык и среда выполнения */
    "target": "ES2023",                                  /* Установить версию JavaScript для генерируемого кода и включить совместимые библиотечные объявления. */
    // "lib": [],                                        /* Указать набор объединенных файлов деклараций библиотек, описывающих целевую среду выполнения. */
    // "jsx": "preserve",                                /* Указать, какой код JSX генерируется. */
    // "libReplacement": true,                           /* Включить замену библиотек. */
    // "experimentalDecorators": true,                   /* Включить экспериментальную поддержку устаревших декораторов. */
    // "emitDecoratorMetadata": true,                    /* Генерировать метаданные дизайна типов для декорированных объявлений в исходных файлах. */
    // "jsxFactory": "",                                 /* Указать фабричную функцию JSX, используемую при генерации React JSX, например 'React.createElement' или 'h'. */
    // "jsxFragmentFactory": "",                         /* Указать ссылку на JSX Fragment, используемую для фрагментов при генерации React JSX, например 'React.Fragment' или 'Fragment'. */
    // "jsxImportSource": "",                            /* Указать модульный идентификатор, используемый для импорта фабричных функций JSX при использовании 'jsx: react-jsx*'. */
    // "reactNamespace": "",                             /* Указать объект, вызываемый для 'createElement'. Это применяется только при генерации 'react' JSX. */
    // "noLib": true,                                    /* Отключить включение любых библиотечных файлов, включая стандартный lib.d.ts. */
    // "useDefineForClassFields": true,                  /* Генерировать поля классов в соответствии со стандартом ECMAScript. */
    // "moduleDetection": "auto",                        /* Управлять методом, используемым для определения формата модулей в JS-файлах. */
    /* Модули */
    "module": "commonjs",                                /* Указать, какой код модуля генерируется. */
    "rootDir": "../",                                  /* Указать корневую папку внутри исходных файлов. */
    "moduleResolution": "node10",                     /* Указать, как TypeScript ищет файл по заданному модульному идентификатору. */
    "baseUrl": ".",                                  /* Указать базовую директорию для разрешения нерелятивных имен модулей. */
    "paths": {
        "@src/*": ["./src/*"],
        "@interfaces/*": ["../interfaces/*"],
    },                                      /* Указать набор записей, которые перенаправляют импорты на дополнительные места поиска. */
    // "rootDirs": [],                                   /* Разрешить обработку нескольких папок как одной при разрешении модулей. */
    // "typeRoots": [],                                  /* Указать несколько папок, которые действуют как './node_modules/@types'. */
    // "types": [],                                      /* Указать имена типовых пакетов, которые будут включены без явного упоминания в исходных файлах. */
    // "allowUmdGlobalAccess": true,                     /* Разрешить доступ к UMD-глобальным переменным из модулей. */
    // "moduleSuffixes": [],                             /* Список суффиксов имен файлов для поиска при разрешении модуля. */
    // "allowImportingTsExtensions": true,               /* Разрешить импорты с расширениями TypeScript. Требуется '--moduleResolution bundler' и либо '--noEmit', либо '--emitDeclarationOnly'. */
    // "rewriteRelativeImportExtensions": true,          /* Переписывать расширения '.ts', '.tsx', '.mts' и '.cts' в относительных путях импорта на их JavaScript-эквиваленты в выходных файлах. */
    // "resolvePackageJsonExports": true,                /* Использовать поле 'exports' в package.json при разрешении импортов пакетов. */
    // "resolvePackageJsonImports": true,                /* Использовать поле 'imports' в package.json при разрешении импортов. */
    // "customConditions": [],                           /* Дополнительные условия, устанавливаемые в дополнение к специфичным для резолвера по умолчанию при разрешении импортов. */
    // "noUncheckedSideEffectImports": true,             /* Проверять побочные эффекты импортов. */
    // "resolveJsonModule": true,                        /* Включить импорт .json файлов. */
    // "allowArbitraryExtensions": true,                 /* Включить импорт файлов с любыми расширениями, если присутствует файл декларации. */
    // "noResolve": true,                                /* Запретить 'import', 'require' или '<reference>' расширять количество файлов, добавляемых TypeScript в проект. */
    /* Поддержка JavaScript */
    // "allowJs": true,                                  /* Разрешить JavaScript-файлы быть частью вашего проекта. Используйте опцию 'checkJS' для получения ошибок из этих файлов. */
    // "checkJs": true,                                  /* Включить отчеты об ошибках в проверяемых JavaScript-файлах. */
    // "maxNodeModuleJsDepth": 1,                        /* Указать максимальную глубину папок для проверки JavaScript-файлов из 'node_modules'. Применимо только с 'allowJs'. */
    /* Генерация выходных файлов */
    // "declaration": true,                              /* Генерировать .d.ts файлы из TypeScript и JavaScript файлов в вашем проекте. */
    // "declarationMap": true,                           /* Создавать карты исходных файлов для .d.ts файлов. */
    // "emitDeclarationOnly": true,                      /* Генерировать только .d.ts файлы, а не JavaScript-файлы. */
    // "sourceMap": true,                                /* Создавать файлы карт исходных файлов для сгенерированных JavaScript-файлов. */
    // "inlineSourceMap": true,                          /* Включать файлы карт исходных файлов внутрь сгенерированных JavaScript-файлов. */
    // "noEmit": true,                                   /* Отключить генерацию файлов при компиляции. */
    // "outFile": "./",                                  /* Указать файл, который объединяет все выходные данные в один JavaScript-файл. Если 'declaration' включено, также указывает файл, который объединяет весь .d.ts вывод. */
    "outDir": "./dist",                                    /* Указать выходную папку для всех сгенерированных файлов. */
    // "removeComments": true,                           /* Отключить генерацию комментариев. */
    // "importHelpers": true,                            /* Разрешить импортировать вспомогательные функции из tslib один раз на проект, вместо включения их в каждый файл. */
    // "downlevelIteration": true,                       /* Генерировать более совместимый, но более многословный и менее производительный JavaScript для итераций. */
    // "sourceRoot": "",                                 /* Указать корневой путь для отладчиков, чтобы найти исходный код. */
    // "mapRoot": "",                                    /* Указать расположение, где отладчик должен находить файлы карт вместо сгенерированных местоположений. */
    // "inlineSources": true,                            /* Включать исходный код в карты исходников внутри сгенерированных JavaScript-файлов. */
    // "emitBOM": true,                                  /* Генерировать маркер порядка байтов UTF-8 (BOM) в начале выходных файлов. */
    // "newLine": "crlf",                                /* Установить символ новой строки для генерируемых файлов. */
    // "stripInternal": true,                            /* Отключить генерацию объявлений, содержащих '@internal' в комментариях JSDoc. */
    // "noEmitHelpers": true,                            /* Отключить генерацию пользовательских вспомогательных функций, таких как '__extends', в скомпилированном выводе. */
    // "noEmitOnError": true,                            /* Отключить генерацию файлов, если сообщаются какие-либо ошибки проверки типов. */
    // "preserveConstEnums": true,                       /* Отключить удаление объявлений 'const enum' в сгенерированном коде. */
    // "declarationDir": "./",                           /* Указать выходную директорию для сгенерированных файлов объявлений. */
    /* Ограничения взаимодействия */
    // "isolatedModules": true,                          /* Убедиться, что каждый файл может быть безопасно транспилирован без зависимости от других импортов. */
    // "verbatimModuleSyntax": true,                     /* Не преобразовывать или удалять никакие импорты или экспорты, не помеченные как типовые, обеспечивая их запись в выходной файл в соответствии с форматом, основанным на настройке 'module'. */
    // "isolatedDeclarations": true,                     /* Требовать достаточную аннотацию экспортируемых элементов, чтобы другие инструменты могли легко генерировать файлы объявлений. */
    // "erasableSyntaxOnly": true,                       /* Не допускать конструкций времени выполнения, которые не являются частью ECMAScript. */
    // "allowSyntheticDefaultImports": true,             /* Разрешить 'import x from y', когда модуль не имеет экспорта по умолчанию. */
    "esModuleInterop": true,                             /* Генерировать дополнительный JavaScript для упрощения поддержки импорта CommonJS-модулей. Это включает 'allowSyntheticDefaultImports' для совместимости типов. */
    // "preserveSymlinks": true,                         /* Отключить разрешение символьных ссылок до их реальных путей. Это соответствует тому же флагу в Node.js. */
    "forceConsistentCasingInFileNames": true,            /* Убедиться, что регистр символов в импортах правильный. */
    /* Проверка типов */
    "strict": true,                                      /* Включить все строгие параметры проверки типов. */
    "noImplicitAny": true,                            /* Включить отчеты об ошибках для выражений и объявлений с подразумеваемым типом 'any'. */
    // "strictNullChecks": true,                         /* При проверке типов учитывать 'null' и 'undefined'. */
    // "strictFunctionTypes": true,                      /* При назначении функций проверять, что параметры и возвращаемые значения являются подтипами. */
    // "strictBindCallApply": true,                      /* Проверять, что аргументы для методов 'bind', 'call' и 'apply' соответствуют оригинальной функции. */
    // "strictPropertyInitialization": true,             /* Проверять, что свойства класса, объявленные, но не установленные в конструкторе. */
    // "strictBuiltinIteratorReturn": true,              /* Встроенные итераторы создаются с типом 'TReturn' равным 'undefined' вместо 'any'. */
    // "noImplicitThis": true,                           /* Включить отчеты об ошибках, когда 'this' имеет тип 'any'. */
    // "useUnknownInCatchVariables": true,               /* По умолчанию переменные catch-клауз имеют тип 'unknown' вместо 'any'. */
    "alwaysStrict": true,                             /* Убедиться, что 'use strict' всегда генерируется. */
    // "noUnusedLocals": true,                           /* Включить отчеты об ошибках, когда локальные переменные не читаются. */
    // "noUnusedParameters": true,                       /* Выдавать ошибку, когда параметр функции не читается. */
    // "exactOptionalPropertyTypes": true,               /* Интерпретировать необязательные типы свойств так, как они написаны, вместо добавления 'undefined'. */
    // "noImplicitReturns": true,                        /* Включить отчеты об ошибках для путей кода, которые явно не возвращаются в функции. */
    // "noFallthroughCasesInSwitch": true,               /* Включить отчеты об ошибках для случаев прохождения через switch-выражения. */
    // "noUncheckedIndexedAccess": true,                 /* Добавлять 'undefined' к типу при доступе через индекс. */
    // "noImplicitOverride": true,                       /* Убедиться, что переопределенные члены в производных классах помечены модификатором override. */
    // "noPropertyAccessFromIndexSignature": true,       /* Обеспечивать использование индексированных аксессоров для ключей, объявленных с использованием индексированного типа. */
    // "allowUnusedLabels": true,                        /* Отключить отчеты об ошибках для неиспользуемых меток. */
    // "allowUnreachableCode": true,                     /* Отключить отчеты об ошибках для недостижимого кода. */
    /* Полнота */
    // "skipDefaultLibCheck": true,                      /* Пропустить проверку типов .d.ts файлов, включенных с TypeScript. */
    "skipLibCheck": true                                 /* Пропустить проверку типов всех .d.ts файлов. */
  }
}